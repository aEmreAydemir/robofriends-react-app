{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","name","email","id","className","alt","src","CardList","robots","map","user","i","username","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","height","border","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","React","ReactDOM","render","document","getElementById"],"mappings":"gMAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,2CCQCQ,EAbF,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,GAEvB,OACI,sBAAKC,UAAU,sDAAf,UACA,qBAAKC,IAAI,SAASC,IAAG,+BAA2BH,EAA3B,cACjB,gCACA,6BAAKF,IACL,8BAAIC,EAAJ,cC6BGK,EApCE,SAAC,GAAe,IAAdC,EAAa,EAAbA,OAef,OACI,8BAGIA,EAAOC,KAAI,SAACC,EAAKC,GACb,OACA,cAAC,EAAD,CAEAR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,MACjBU,SAAUJ,EAAOG,GAAGC,UAJfD,SCVNE,EAZE,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,qBAAKV,UAAU,MAAf,SACA,uBACAA,UAAU,mCACVW,KAAK,SACLC,YAAa,gBACbC,SAAYH,OCCLI,EARD,SAACC,GACf,OACI,qBAAKC,MAAO,CAACC,UAAU,SAASC,OAAO,SAASC,OAAO,mBAAvD,SACKJ,EAAMK,YCkBAC,E,kDApBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAM,CACPC,UAAU,GAHC,E,qDAOnB,SAAkBC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,oBAIhC,WACI,OAAGG,KAAKJ,MAAMC,SACH,sDAEJG,KAAKX,MAAMK,a,GAjBKQ,aCqDZC,G,wDA9CX,aAAe,IAAD,8BACV,gBAiBJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SAjBzC,EAAKZ,MAAO,CACRlB,OAAQ,GACR4B,YAAa,IAJP,E,qDAQd,WAAqB,IAAD,OAChBG,MAAM,8CACL7C,MAAK,SAAA8C,GAAY,OAAOA,EAASC,UACjC/C,MAAK,SAAAgD,GAAQ,EAAKX,SAAS,CAACvB,OAAOkC,S,oBAW3C,WAAU,IAAD,EACwBZ,KAAKJ,MAA5BlB,EADD,EACCA,OAAQ4B,EADT,EACSA,YACTO,EAAiBnC,EAAOoC,QAAO,SAAAC,GACjC,OAAOA,EAAM5C,KAAK6C,cAAcC,SAASX,EAAYU,kBAG1D,OAAQtC,EAAOwC,OAGV,sBAAK5C,UAAU,KAAf,UACA,6CACA,cAAC,EAAD,CAAWU,aAAcgB,KAAKI,iBAC9B,cAAC,EAAD,UACA,cAAC,EAAD,UACI,cAAC,EAAD,CAAU1B,OAAQmC,WAPtB,oBAAIvC,UAAU,KAAd,yB,GA9BU6C,IAAMjB,YCFxBkB,IAASC,OACP,cAAC,EAAD,IAEAC,SAASC,eAAe,SAM1B9D,M","file":"static/js/main.f8686868.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\n\r\nconst Card = ({name, email,id}) => {\r\n  //  const {name, email,id} = props; its better the other way\r\n    return (\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n        <img alt='robots' src ={`https://robohash.org/${id}?200x200`}  />\r\n            <div>\r\n            <h2>{name}</h2>\r\n            <p>{email} </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList = ({robots }) => {\r\n\r\n   /*\r\n   this function could be simply written inside the return inside the brackets as you can see below\r\n   const cardComponent = robots.map((user,i)=> {\r\n        return (\r\n        <Card \r\n        key={i} \r\n        id={robots[i].id} \r\n        name={robots[i].name} \r\n        email={robots[i].email} \r\n        username={robots[i].username}/>)\r\n        }\r\n    ) */\r\n\r\n    return(\r\n        <div>\r\n            {\r\n            //cardComponent to call the function above\r\n            robots.map((user,i)=> {\r\n                return (\r\n                <Card \r\n                key={i} \r\n                id={robots[i].id} \r\n                name={robots[i].name} \r\n                email={robots[i].email} \r\n                username={robots[i].username}\r\n                />\r\n                )\r\n                }\r\n            ) \r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nconst SearchBox =({ searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n        <input\r\n        className='pa3 ba b--green bg-lightest-blue' \r\n        type='search' \r\n        placeholder= 'search robots'\r\n        onChange = {searchChange}/>\r\n        \r\n        </div>\r\n    )\r\n}\r\nexport default SearchBox","import React from 'react'\r\n\r\nconst Scroll =(props) => {\r\nreturn (\r\n    <div style={{overflowY:'scroll',height:'1000px',border:'1px solid black' }}>\r\n        {props.children}\r\n    </div>\r\n)\r\n}\r\n\r\nexport default Scroll","import React , {Component} from 'react'\r\n\r\nclass ErrorBoundry extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state={\r\n            hasError: false\r\n        }\r\n    }\r\n\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError:true})\r\n        \r\n    }\r\n\r\nrender() {\r\n    if(this.state.hasError) {\r\n        return <h1>Some problem occured</h1>\r\n    }\r\n    return this.props.children\r\n}\r\n}\r\n\r\nexport default ErrorBoundry","import React from 'react';\r\nimport CardList from '../components/CardList';\r\n//import {robots} from './robots';\r\nimport SearchBox from '../components/SearchBox.js'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\nimport './App.css'\r\n\r\nclass App extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state= {\r\n            robots: [],\r\n            searchfield: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response=> {return response.json()})\r\n        .then(users=>{this.setState({robots:users})})\r\n    }\r\n\r\n    /*\r\n    create the function as given below instead of onSearchChange =(event) {}. This way\r\n    we can reach the state inside constructor of App class\r\n     */\r\n    onSearchChange = (event) => {\r\n        this.setState({searchfield: event.target.value})\r\n        \r\n    }\r\n render() {\r\n    const {robots, searchfield} = this.state;\r\n    const filteredRobots = robots.filter(robot =>{\r\n        return robot.name.toLowerCase().includes(searchfield.toLowerCase())\r\n    })\r\n    \r\n   return !robots.length ? \r\n        <h1 className='tc'>Loading</h1> : \r\n        (  \r\n        <div className='tc'>\r\n        <h1>RoboFriends</h1>\r\n        <SearchBox searchChange={this.onSearchChange} />\r\n        <Scroll>\r\n        <ErrorBoundry>\r\n            <CardList robots={filteredRobots}/>\r\n        </ErrorBoundry>\r\n        </Scroll>\r\n        </div> \r\n    ); \r\n    \r\n     \r\n }\r\n    \r\n}\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'tachyons';\r\nimport App from './containers/App.js';\r\nReactDOM.render(\r\n  <App/>\r\n,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n"],"sourceRoot":""}